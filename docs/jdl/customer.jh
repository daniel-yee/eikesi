DEFAULT_MIN_NAME = 2
DEFAULT_MAX_NAME = 14
DEFAULT_MIN_BYTES = 1
DEFAULT_MAX_BYTES = 2
DEFAULT_MIN_TEXT = 1
DEFAULT_MAX_TEXT = 24
DEFAULT_MIN = 1
DEFAULT_MAX = 255
DEFAULT_MAX_SM = 50
DEFAULT_MIN_PHONE = 6
DEFAULT_MAX_PHONE = 18
/**
 * 客户关系（客户对多个关系，每个关系又对一个目标客户）
 * 客户关系需两个关联客户各有一份
 * @author hedongyang
 * @version 2018-05-14
 */
entity CustomerRelation {
    // userIdMain String minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),    //  
    // userIdFrom String minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),    //  
    /** 客户名备注,默认为客户昵称 */
    remarkName String minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),    //  
    /** 拼音首字母 */
    py String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX), 
    /** 拼音全拼 */
    pinYin String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX),
    /** 关系类型 {0: '黑名单', 1: '好友'} */
    type String required minlength(DEFAULT_MIN_BYTES) maxlength(DEFAULT_MAX_BYTES),  //
    /** 关系创建时间 */
    createdDate Instant required
}
/**
 * 群组关系(多对多)
 * @author hedongyang
 * @version 2018-05-18
 */
entity FlockRelation {
    // id String minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),    //  
    // fromId String minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),    //  
    /** 群组备注,默认为群组昵称 */
    remarkName String minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),    //  
    /** 拼音首字母 */
    // py String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX), 
    /** 拼音全拼 */
    // pinYin String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX),
    /**
     * 关系类型 {00: '黑名单', 1: '成员'} 
     * @defect:关系是相对的，这里没表达出来？
     */
    type String required minlength(DEFAULT_MIN_BYTES) maxlength(DEFAULT_MAX_BYTES),  //
    /** 关系创建时间 */
    createdDate Instant required
}
/**
 * 群组
 * @author hedongyang
 * @version 2018-05-14
 */
entity Flock {
    /** 群组名称 */
    name String required minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),
    /** 拼音首字母 */
    py String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX), 
    /** 拼音全拼 */
    pinYin String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX),
    /** 头像 */
    imageUrl String required maxlength(DEFAULT_MAX),
    /** 群组创建时间 */
    createdDate Instant required
}
/**
 * 客戶
 * @author hedongyang
 * @version 2018-05-15
 */
entity Customer {
    /** 手机号 */
    mobile String required minlength(DEFAULT_MIN_PHONE) maxlength(DEFAULT_MAX_PHONE),
    /** 昵称 */
    firstName String required minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),
    /** 姓名 */
    lastName String required minlength(DEFAULT_MIN_NAME) maxlength(DEFAULT_MAX_NAME),
    /** 拼音首字母 */
    py String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX), 
    /** 拼音全拼 */
    pinYin String required minlength(DEFAULT_MIN) maxlength(DEFAULT_MAX),
    /** hash密码 */
    passwordHash String required minlength(DEFAULT_MIN) maxlength(60),
    /** 邮箱 */
    email String  minlength(DEFAULT_MIN) maxlength(100),
    /** 头像 */
    imageUrl String  minlength(DEFAULT_MIN) maxlength(100),
    /** 状态 {0: '不可用', 1: '可用'} */
    activated Boolean required,
    /** 语言key */
    langKey String required minlength(DEFAULT_MIN) maxlength(6),
    /** 注册key */
    activationKey String required minlength(DEFAULT_MIN) maxlength(20),
    /** 重置key */
    resetKey String required minlength(DEFAULT_MIN) maxlength(20),
    /** 重置时间 */
    resetDate Instant required,
    /** 后台创建则关联后台账号login,自己注册为空 */
    createdBy String  minlength(DEFAULT_MIN) maxlength(50),
    /** 创建时间 */
    createdDate Instant required
}

//  relationship OneToOne {
    /** 一个客户关系关联一个客户 */
//    CustomerRelation{customer(firstName)} to Customer{customerRelation(remarkName)}
//  }
relationship OneToMany {
    /** 一个客户关联多个客户关系 */
  Customer{customerRelation(remarkName)} to CustomerRelation{customer(firstName)},
    /** 一个客户关联多个群组关系 */
  Customer{flockRelation(remarkName)} to FlockRelation{customer(firstName)},
    /** 一个群组关联多个群组关系 */
  Flock{flockRelation(remarkName)} to FlockRelation{customerFlock(name)}
}

paginate Customer, Flock with pagination
//	dto * with mapstruct
//  service * with serviceClass
//  skipServer *
//  skipClient *
// microservice DemoA with demoAbcService
// microservice DemoB with demoAbcService
// microservice DemoC with demoAbcService
// microservice DemoD with demoDeService
// microservice * with demoDeService except DemoA, DemoB, DemoC, CustomerFlock, Relation